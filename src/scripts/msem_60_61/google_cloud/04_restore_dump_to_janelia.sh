#!/bin/bash

# ----------------------------------------------------------------------------
# Restore mongodb dump data from Google to Janelia's database.
# Archive dumps are expected to have been generated by running db-dump-google-archive.sh.
# Collection dumps are expected to have been generated by running db-dump-janelia-collections.sh.

set -e

if (( $# < 2 )); then
  echo "
Usage:    $0 <DB> <archive dump file>
          $0 <DB> <collection dump directory>

Examples: $0  render  render-ws-mongodb-8c-32gb-abc/20250216_213836.render.dump.gz
          $0  match   mongodb_google/archives/20250222_003111.match.dump.gz
          $0  match   mongodb_janelia/dump_20250304_080118_before_match_patch/match
"
  exit 1
fi

DB="${1}"
DUMP_FILE_OR_DIR="${2}"

if [ -f "${DUMP_FILE_OR_DIR}" ]; then
  DUMP_TYPE="archive"
elif [ -d "${DUMP_FILE_OR_DIR}" ]; then
  DUMP_TYPE="collection"
else
  echo "ERROR: ${DUMP_FILE_OR_DIR} not found"
  exit 1
fi

read -rsp "Enter password for MongoDB root account: " MONGO_PWD
echo

# see https://www.mongodb.com/docs/database-tools/mongorestore/
MONGO_BIN="/groups/hess/hesslab/render/mongodb/mongodb-database-tools-rhel93-x86_64-100.10.0/bin"

CONNECTION_URI="mongodb://root:${MONGO_PWD}@render-mongodb4:27017,render-mongodb5:27017,render-mongodb6:27017/${DB}?authSource=admin&replicaSet=rsRender"

if [ "${DUMP_TYPE}" == "archive" ]; then

  echo "restoring ${DUMP_FILE_OR_DIR} ..."
  ${MONGO_BIN}/mongorestore --uri="${CONNECTION_URI}" --archive="${DUMP_FILE_OR_DIR}" --gzip

else

  # restore bson.gz files ...
  for DUMP_FILE in "${DUMP_FILE_OR_DIR}"/*.bson.gz; do
    echo "restoring ${DUMP_FILE} ..."
    ${MONGO_BIN}/mongorestore --uri="${CONNECTION_URI}" --gzip "${DUMP_FILE}"
  done

  # import "hacked" admin__stack_meta_data.json if it exists
  DUMP_FILE="${DUMP_FILE_OR_DIR}/admin__stack_meta_data.json"
  if [ -f "${DUMP_FILE}" ]; then
    echo "importing ${DUMP_FILE} ..."
    ${MONGO_BIN}/mongoimport --uri="${CONNECTION_URI}" --file="${DUMP_FILE}"
  fi

fi
